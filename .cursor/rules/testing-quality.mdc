---
description: Testing and quality assurance rules for OpenSSL (pyramid, gates, analytics)
globs: ["test/**", "**/*.c", "**/*.h", "scripts/**/*.py", ".github/workflows/**/*.yml"]
alwaysApply: true
---

# Testing and Quality Assurance Rules

Based on analysis of oms-dev testing practices and modern C/C++ testing methodologies.

## Comprehensive Testing Strategy

### Test Pyramid Implementation
- **Unit Tests**: Fast, isolated tests for individual components
- **Integration Tests**: Test component interactions and interfaces
- **System Tests**: End-to-end testing of complete functionality
- **Performance Tests**: Validate performance requirements and benchmarks

### Test Automation
- **Automated Test Execution**: Run tests automatically in CI/CD
- **Test Result Reporting**: Generate comprehensive test reports
- **Test Coverage Analysis**: Measure and track test coverage
- **Regression Testing**: Prevent regressions with automated testing

### Quality Gates
- **Code Quality Metrics**: Enforce code quality standards
- **Test Coverage Requirements**: Require minimum test coverage
- **Performance Benchmarks**: Validate performance requirements
- **Security Testing**: Ensure security requirements are met

## Michal's Testing Patterns

### Automated Testing Integration
```python
def automated_testing_pipeline():
    """Automated testing pipeline - pattern from oms-dev"""
    # Pattern: Comprehensive automated testing
    # - Run unit tests
    # - Execute integration tests
    # - Perform performance tests
    # - Validate security requirements
    pass


def test_validation():
    """Validate test results and quality"""
    # Check test coverage
    # Validate test results
    # Generate quality reports
    # Enforce quality gates
    pass
```

### Database Testing
```python
def database_testing():
    """Database testing - pattern from oms-dev"""
    # Pattern from oms-dev: Database schema validation
    # - Test schema integrity
    # - Validate data consistency
    # - Check performance
    # - Test security
    pass


def schema_validation_tests():
    """Schema validation tests"""
    # Test schema compatibility
    # Validate data integrity
    # Check performance
    # Test security constraints
    pass
```

### Build Validation Testing
```python
def build_validation_tests():
    """Build validation tests"""
    # Test build outputs
    # Validate artifacts
    # Check functionality
    # Verify performance
    pass
```

## OpenSSL-Specific Testing

### Cryptographic Testing
```python
def cryptographic_testing():
    """Comprehensive cryptographic testing"""
    # Test algorithm implementations
    # Validate cryptographic protocols
    # Test key generation
    # Verify random number generation
    pass


def crypto_algorithm_tests():
    """Test cryptographic algorithms"""
    # Test AES implementations
    # Validate RSA operations
    # Check ECC algorithms
    # Test hash functions
    pass
```

### Performance Testing
```python
def performance_testing():
    """Comprehensive performance testing"""
    # Benchmark cryptographic operations
    # Test memory usage
    # Validate performance requirements
    # Compare with previous versions
    pass


def benchmark_tests():
    """Benchmark tests for performance validation"""
    # Crypto operation benchmarks
    # Memory usage tests
    # Throughput tests
    # Latency tests
    pass
```

### Security Testing
```python
def security_testing():
    """Comprehensive security testing"""
    # Test for vulnerabilities
    # Validate security properties
    # Test access controls
    # Check for security regressions
    pass


def vulnerability_tests():
    """Vulnerability testing suite"""
    # Test for known vulnerabilities
    # Validate security patches
    # Test for new vulnerabilities
    # Check security configurations
    pass
```

### FIPS Testing
```python
def fips_testing():
    """FIPS compliance testing"""
    # Test FIPS mode
    # Validate FIPS algorithms
    # Test FIPS compliance
    # Generate compliance reports
    pass


def fips_validation_tests():
    """FIPS validation tests"""
    # Test FIPS algorithms
    # Validate FIPS mode
    # Check FIPS compliance
    # Test FIPS performance
    pass
```

## Test Infrastructure

### Test Environment Setup
```python
def setup_test_environment():
    """Set up comprehensive test environment"""
    # Configure test environment
    # Set up test data
    # Initialize test tools
    # Validate test setup
    pass


def test_environment_validation():
    """Validate test environment"""
    # Check test environment
    # Validate test tools
    # Test test data
    # Verify test setup
    pass
```

### Test Data Management
```python
def manage_test_data():
    """Manage test data effectively"""
    # Generate test data
    # Validate test data
    # Store test data
    # Clean up test data
    pass


def test_data_validation():
    """Validate test data quality"""
    # Check test data integrity
    # Validate test data format
    # Test data consistency
    # Verify test data coverage
    pass
```

### Test Tool Integration
```python
def integrate_test_tools():
    """Integrate testing tools"""
    # Unit testing frameworks
    # Integration testing tools
    # Performance testing tools
    # Security testing tools
    pass


def test_tool_validation():
    """Validate testing tools"""
    # Check tool functionality
    # Validate tool configuration
    # Test tool integration
    # Verify tool results
    pass
```

## Quality Assurance

### Code Quality Metrics
```python
def code_quality_metrics():
    """Comprehensive code quality metrics"""
    # Code complexity metrics
    # Code coverage metrics
    # Code quality metrics
    # Performance metrics
    pass


def quality_gate_validation():
    """Validate quality gates"""
    # Check quality requirements
    # Validate quality metrics
    # Enforce quality standards
    # Generate quality reports
    pass
```

### Static Analysis
```python
def static_analysis():
    """Comprehensive static analysis"""
    # Code analysis
    # Security analysis
    # Performance analysis
    # Quality analysis
    pass


def static_analysis_validation():
    """Validate static analysis results"""
    # Check analysis results
    # Validate analysis tools
    # Test analysis configuration
    # Verify analysis coverage
    pass
```

### Dynamic Analysis
```python
def dynamic_analysis():
    """Comprehensive dynamic analysis"""
    # Runtime analysis
    # Performance analysis
    # Security analysis
    # Memory analysis
    pass


def dynamic_analysis_validation():
    """Validate dynamic analysis results"""
    # Check analysis results
    # Validate analysis tools
    # Test analysis configuration
    # Verify analysis coverage
    pass
```

## Test Reporting and Analytics

### Test Reporting
```python
def generate_test_reports():
    """Generate comprehensive test reports"""
    # Test result reports
    # Coverage reports
    # Performance reports
    # Quality reports
    pass


def test_report_validation():
    """Validate test reports"""
    # Check report accuracy
    # Validate report format
    # Test report generation
    # Verify report content
    pass
```

### Test Analytics
```python
def test_analytics():
    """Comprehensive test analytics"""
    # Test trend analysis
    # Quality trend analysis
    # Performance trend analysis
    # Coverage trend analysis
    pass


def test_metrics_collection():
    """Collect comprehensive test metrics"""
    # Test execution metrics
    # Test coverage metrics
    # Test performance metrics
    # Test quality metrics
    pass
```

## Continuous Testing

### CI/CD Integration
```python
def ci_cd_testing():
    """Comprehensive CI/CD testing"""
    # Automated test execution
    # Test result validation
    # Quality gate enforcement
    # Test reporting
    pass


def continuous_testing():
    """Continuous testing implementation"""
    # Test automation
    # Test monitoring
    # Test reporting
    # Test optimization
    pass
```

### Test Optimization
```python
def test_optimization():
    """Optimize testing processes"""
    # Test execution optimization
    # Test data optimization
    # Test environment optimization
    # Test tool optimization
    pass


def test_performance_optimization():
    """Optimize test performance"""
    # Test execution speed
    # Test data efficiency
    # Test environment performance
    # Test tool performance
    pass
```

## Best Practices Summary

1. **Comprehensive Testing**: Implement full test pyramid
2. **Test Automation**: Automate all testing processes
3. **Quality Gates**: Enforce quality requirements
4. **Test Coverage**: Maintain high test coverage
5. **Performance Testing**: Validate performance requirements
6. **Security Testing**: Ensure security requirements
7. **Test Reporting**: Generate comprehensive reports
8. **Test Analytics**: Analyze test trends and metrics
9. **Continuous Testing**: Implement continuous testing
10. **Test Optimization**: Optimize testing processes

These rules ensure comprehensive testing and quality assurance for OpenSSL development while maintaining high quality standards.