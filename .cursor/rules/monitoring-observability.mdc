---
description: Monitoring and observability guidance for OpenSSL builds and automation
globs: [".github/workflows/**/*.yml", "scripts/**/*.py", "**/*.c", "**/*.h"]
alwaysApply: true
---

# Monitoring and Observability Rules

Based on analysis of oms-dev monitoring practices and modern observability requirements for OpenSSL.

## Comprehensive Monitoring Strategy

### Observability Pillars
- **Metrics**: Quantitative measurements of system behavior
- **Logs**: Detailed records of events and activities
- **Traces**: Distributed request flow tracking
- **Profiling**: Performance analysis and optimization

### Monitoring Levels
- **Infrastructure Monitoring**: System resources and performance
- **Application Monitoring**: Application behavior and performance
- **Business Monitoring**: Key business metrics and KPIs
- **Security Monitoring**: Security events and threats

### Alerting and Notification
- **Proactive Alerting**: Alert before issues become critical
- **Intelligent Alerting**: Reduce alert fatigue with smart filtering
- **Escalation Procedures**: Proper escalation for critical issues
- **Notification Channels**: Multiple notification methods

## Michal's Monitoring Patterns

### Build Monitoring
```python
def build_monitoring():
    """Build monitoring - pattern from oms-dev"""
    # Pattern: Comprehensive build monitoring
    # - Track build performance
    # - Monitor build success rates
    # - Analyze build trends
    # - Alert on build failures
    pass

def build_metrics_collection():
    """Collect comprehensive build metrics"""
    # Build time metrics
    # Build success metrics
    # Build performance metrics
    # Build quality metrics
    pass
```

### Package Monitoring
```python
def package_monitoring():
    """Package monitoring and validation"""
    # Monitor package updates
    # Track package dependencies
    # Validate package integrity
    # Alert on package issues
    pass

def dependency_monitoring():
    """Monitor dependency health"""
    # Track dependency versions
    # Monitor dependency vulnerabilities
    # Validate dependency compatibility
    # Alert on dependency issues
    pass
```

### Database Monitoring
```python
def database_monitoring():
    """Database monitoring - pattern from oms-dev"""
    # Pattern: Database schema monitoring
    # - Monitor schema changes
    # - Track data integrity
    # - Validate performance
    # - Alert on issues
    pass

def schema_monitoring():
    """Monitor database schema health"""
    # Track schema changes
    # Monitor schema performance
    # Validate schema integrity
    # Alert on schema issues
    pass
```

## OpenSSL-Specific Monitoring

### Cryptographic Monitoring
```python
def cryptographic_monitoring():
    """Monitor cryptographic operations"""
    # Track crypto performance
    # Monitor crypto errors
    # Validate crypto security
    # Alert on crypto issues
    pass

def crypto_performance_monitoring():
    """Monitor cryptographic performance"""
    # Algorithm performance
    # Key generation performance
    # Encryption/decryption performance
    # Hash performance
    pass
```

### Security Monitoring
```python
def security_monitoring():
    """Comprehensive security monitoring"""
    # Monitor security events
    # Track security metrics
    # Validate security posture
    # Alert on security issues
    pass

def vulnerability_monitoring():
    """Monitor vulnerability status"""
    # Track known vulnerabilities
    # Monitor security patches
    # Validate security updates
    # Alert on new vulnerabilities
    pass
```

### Performance Monitoring
```python
def performance_monitoring():
    """Comprehensive performance monitoring"""
    # Monitor system performance
    # Track application performance
    # Validate performance requirements
    # Alert on performance issues
    pass

def benchmark_monitoring():
    """Monitor performance benchmarks"""
    # Track benchmark results
    # Monitor performance trends
    # Validate performance goals
    # Alert on performance degradation
    pass
```

## Infrastructure Monitoring

### System Resource Monitoring
```python
def system_monitoring():
    """Monitor system resources"""
    # CPU usage monitoring
    # Memory usage monitoring
    # Disk usage monitoring
    # Network usage monitoring
    pass

def resource_utilization():
    """Monitor resource utilization"""
    # Track resource usage
    # Monitor resource trends
    # Validate resource limits
    # Alert on resource issues
    pass
```

### Container Monitoring
```python
def container_monitoring():
    """Monitor containerized environments"""
    # Container performance
    # Container health
    # Container resource usage
    # Container security
    pass

def container_health_monitoring():
    """Monitor container health"""
    # Container status
    # Container performance
    # Container resource usage
    # Container security
    pass
```

### Network Monitoring
```python
def network_monitoring():
    """Monitor network performance"""
    # Network latency
    # Network throughput
    # Network errors
    # Network security
    pass

def network_performance_monitoring():
    """Monitor network performance metrics"""
    # Latency metrics
    # Throughput metrics
    # Error metrics
    # Security metrics
    pass
```

## Application Monitoring

### Application Performance Monitoring
```python
def application_monitoring():
    """Monitor application performance"""
    # Application metrics
    # Application performance
    # Application health
    # Application errors
    pass

def application_health_monitoring():
    """Monitor application health"""
    # Health checks
    # Performance metrics
    # Error tracking
    # Availability monitoring
    pass
```

### Error Tracking and Analysis
```python
def error_tracking():
    """Track and analyze errors"""
    # Error collection
    # Error analysis
    # Error reporting
    # Error resolution
    pass

def error_analysis():
    """Analyze error patterns"""
    # Error trends
    # Error root causes
    # Error impact analysis
    # Error prevention
    pass
```

### User Experience Monitoring
```python
def user_experience_monitoring():
    """Monitor user experience"""
    # User metrics
    # User behavior
    # User satisfaction
    # User feedback
    pass

def user_behavior_analysis():
    """Analyze user behavior"""
    # User patterns
    # User preferences
    # User issues
    # User satisfaction
    pass
```

## Logging and Log Management

### Structured Logging
```python
def structured_logging():
    """Implement structured logging"""
    # Log format standardization
    # Log level management
    # Log context preservation
    # Log correlation
    pass

def log_management():
    """Manage logs effectively"""
    # Log collection
    # Log storage
    # Log retention
    # Log analysis
    pass
```

### Log Analysis
```python
def log_analysis():
    """Analyze logs for insights"""
    # Log parsing
    # Log correlation
    # Log analysis
    # Log reporting
    pass

def log_correlation():
    """Correlate logs across systems"""
    # Log correlation
    # Event correlation
    # Timeline analysis
    # Root cause analysis
    pass
```

## Metrics and Analytics

### Metrics Collection
```python
def metrics_collection():
    """Collect comprehensive metrics"""
    # System metrics
    # Application metrics
    # Business metrics
    # Security metrics
    pass

def metrics_aggregation():
    """Aggregate metrics for analysis"""
    # Metrics aggregation
    # Metrics correlation
    # Metrics analysis
    # Metrics reporting
    pass
```

### Performance Analytics
```python
def performance_analytics():
    """Analyze performance data"""
    # Performance trends
    # Performance patterns
    # Performance optimization
    # Performance reporting
    pass

def performance_optimization():
    """Optimize performance based on metrics"""
    # Performance analysis
    # Performance tuning
    # Performance optimization
    # Performance validation
    pass
```

## Alerting and Notification

### Intelligent Alerting
```python
def intelligent_alerting():
    """Implement intelligent alerting"""
    # Alert filtering
    # Alert correlation
    # Alert prioritization
    # Alert suppression
    pass

def alert_management():
    """Manage alerts effectively"""
    # Alert creation
    # Alert routing
    # Alert escalation
    # Alert resolution
    pass
```

### Notification Systems
```python
def notification_systems():
    """Implement notification systems"""
    # Notification channels
    # Notification preferences
    # Notification delivery
    # Notification tracking
    pass

def notification_optimization():
    """Optimize notification delivery"""
    # Notification filtering
    # Notification timing
    # Notification personalization
    # Notification effectiveness
    pass
```

## Dashboard and Visualization

### Monitoring Dashboards
```python
def monitoring_dashboards():
    """Create monitoring dashboards"""
    # Dashboard design
    # Dashboard metrics
    # Dashboard visualization
    # Dashboard customization
    pass

def dashboard_optimization():
    """Optimize dashboard performance"""
    # Dashboard performance
    # Dashboard usability
    # Dashboard customization
    # Dashboard analytics
    pass
```

### Data Visualization
```python
def data_visualization():
    """Visualize monitoring data"""
    # Chart creation
    # Graph visualization
    # Trend analysis
    # Pattern recognition
    pass

def visualization_optimization():
    """Optimize data visualization"""
    # Visualization performance
    # Visualization clarity
    # Visualization interactivity
    # Visualization accessibility
    pass
```

## Best Practices Summary

1. **Comprehensive Monitoring**: Monitor all aspects of the system
2. **Proactive Alerting**: Alert before issues become critical
3. **Intelligent Analysis**: Use AI/ML for intelligent analysis
4. **Performance Optimization**: Optimize based on monitoring data
5. **Security Monitoring**: Monitor security events and threats
6. **User Experience**: Monitor user experience and satisfaction
7. **Log Management**: Implement effective log management
8. **Metrics Collection**: Collect comprehensive metrics
9. **Dashboard Design**: Create effective monitoring dashboards
10. **Continuous Improvement**: Continuously improve monitoring

These rules ensure comprehensive monitoring and observability for OpenSSL development while maintaining high system reliability and performance.