name: Basic Validation

# Minimal validation for the separated OpenSSL repository
# Complex orchestration handled by openssl-tools repository

on:
  pull_request:
    paths:
      - 'conanfile.py'
      - 'VERSION.dat'
      - '.github/workflows/**'
      - '*.yml'
      - '*.yaml'
  push:
    branches: [main, master]
    paths:
      - 'conanfile.py' 
      - 'VERSION.dat'
      - '.github/workflows/**'
      - '*.yml'
      - '*.yaml'
  workflow_dispatch:

jobs:
  basic-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Should be very fast for basic validation
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install basic dependencies
        run: |
          pip install conan>=2.0 pyyaml
          echo "✅ Dependencies installed"
      
      - name: Validate VERSION.dat
        run: |
          if [ ! -f "VERSION.dat" ]; then
            echo "❌ VERSION.dat not found"
            exit 1
          fi
          
          # Check for required fields
          required_fields=("MAJOR=" "MINOR=" "PATCH=")
          for field in "${required_fields[@]}"; do
            if ! grep -q "$field" VERSION.dat; then
              echo "❌ VERSION.dat missing required field: $field"
              exit 1
            fi
          done
          
          echo "✅ VERSION.dat is valid"
      
      - name: Validate conanfile.py syntax
        run: |
          if [ ! -f "conanfile.py" ]; then
            echo "❌ conanfile.py not found - this is required for openssl-tools integration"
            exit 1
          fi
          
          # Test Python syntax
          python -m py_compile conanfile.py
          echo "✅ conanfile.py syntax is valid"
          
          # Test basic functionality
          python -c "
          import sys
          sys.path.append('.')
          from conanfile import OpenSSLConan
          
          conan = OpenSSLConan()
          conan.recipe_folder = '.'
          
          # Test version detection
          try:
              conan.set_version()
              print(f'✅ Version detection works: {conan.version}')
          except Exception as e:
              print(f'❌ Version detection failed: {e}')
              sys.exit(1)
          
          # Test basic configure
          try:
              conan.configure()
              print('✅ Basic configure works')
          except Exception as e:
              print(f'❌ Configure failed: {e}')
              sys.exit(1)
          "
      
      - name: Validate required OpenSSL structure
        run: |
          echo "🔍 Validating minimal OpenSSL repository structure..."
          
          # Core OpenSSL files that must exist
          required_items=(
            "Configure"
            "config"
            "crypto"
            "ssl" 
            "include"
            "apps"
            "providers"
          )
          
          for item in "${required_items[@]}"; do
            if [ ! -e "$item" ]; then
              echo "❌ Missing required OpenSSL component: $item"
              exit 1
            else
              echo "✅ Found: $item"
            fi
          done
          
          echo "✅ OpenSSL repository structure is valid"
      
      - name: Validate workflow files
        run: |
          echo "🔍 Validating GitHub Actions workflows..."
          
          # Check YAML syntax for all workflow files
          for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
            if [ -f "$workflow" ]; then
              echo "Validating: $workflow"
              python -c "
          import yaml
          import sys
          
          try:
              with open('$workflow', 'r') as f:
                  yaml.safe_load(f)
              print('✅ $workflow has valid YAML syntax')
          except yaml.YAMLError as e:
              print('❌ $workflow has YAML syntax error: {e}')
              sys.exit(1)
          except Exception as e:
              print('❌ Failed to validate $workflow: {e}')
              sys.exit(1)
              "
            fi
          done
          
          # Check that trigger-tools.yml exists (required for separation architecture)
          if [ ! -f ".github/workflows/trigger-tools.yml" ]; then
            echo "❌ Missing required workflow: trigger-tools.yml"
            echo "This is required for openssl-tools integration"
            exit 1
          fi
          
          echo "✅ Workflow validation complete"
      
      - name: Test openssl-tools integration setup
        run: |
          echo "🔍 Testing openssl-tools integration readiness..."
          
          # Check that trigger workflow is properly configured
          if ! grep -q "repository_dispatch" .github/workflows/trigger-tools.yml; then
            echo "❌ trigger-tools.yml missing repository_dispatch configuration"
            exit 1
          fi
          
          if ! grep -q "sparesparrow/openssl-tools" .github/workflows/trigger-tools.yml; then
            echo "❌ trigger-tools.yml not configured for sparesparrow/openssl-tools"
            exit 1
          fi
          
          echo "✅ OpenSSL-tools integration setup is ready"
      
      - name: Success Summary
        if: success()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ✅ Basic Validation - PASSED
          
          ### Validated Components
          - ✅ VERSION.dat format and required fields
          - ✅ conanfile.py syntax and basic functionality
          - ✅ Required OpenSSL source structure  
          - ✅ GitHub Actions workflows syntax
          - ✅ OpenSSL-tools integration configuration
          
          ### Repository Status
          - **Type:** Minimal OpenSSL repository (separated architecture)
          - **Integration:** Ready for openssl-tools orchestration
          - **Validation:** All basic checks passed
          
          ### Next Steps
          - Changes can trigger openssl-tools for full build testing
          - Complex build orchestration handled by openssl-tools repository
          - This minimal validation ensures basic compatibility
          EOF
      
      - name: Failure Summary
        if: failure()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ❌ Basic Validation - FAILED
          
          ### Issues Found
          Basic validation failed. Common issues:
          
          1. **VERSION.dat Problems:**
             - File missing or invalid format
             - Missing MAJOR, MINOR, or PATCH fields
          
          2. **conanfile.py Issues:**
             - Syntax errors in Python code
             - Version detection not working with VERSION.dat
             - Basic configuration failing
          
          3. **Repository Structure:**
             - Missing core OpenSSL components
             - Required workflows not configured properly
          
          4. **Integration Setup:**
             - trigger-tools.yml not properly configured
             - Missing openssl-tools repository references
          
          ### Required Actions
          1. Fix the specific error shown in logs above
          2. Ensure this is a proper OpenSSL source repository
          3. Verify conanfile.py is compatible with OpenSSL structure
          4. Do NOT proceed until basic validation passes
          EOF