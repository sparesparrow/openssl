name: Basic Validation

on:
  pull_request:
    paths:
      - 'conanfile.py'
      - 'conanfile-minimal.py'
      - 'VERSION.dat'
      - '.github/workflows/**'
      - 'conan/**.profile'
      - 'conan/**.yml'
      - '*.yml'
      - '*.yaml'
      - '*.py'
  push:
    branches: [main, master]
    paths:
      - 'conanfile.py' 
      - 'conanfile-minimal.py'
      - 'VERSION.dat'
      - '.github/workflows/**'
      - 'conan/**.profile'
      - 'conan/**.yml'
      - '*.yml'
      - '*.yaml'
      - '*.py'
  workflow_dispatch:

jobs:
  syntax-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install conan>=2.0
          pip install pyyaml
      
      - name: Validate conanfile.py and conanfile-minimal.py syntax
        run: |
          echo "üîç Validating conanfile syntax..."
          python -m py_compile conanfile.py
          echo "‚úÖ conanfile.py syntax is valid"
          
          if [ -f "conanfile-minimal.py" ]; then
            python -m py_compile conanfile-minimal.py
            echo "‚úÖ conanfile-minimal.py syntax is valid"
          fi
      
      - name: Validate YAML files
        run: |
          python -c "
          import yaml
          import sys
          import glob
          
          yaml_files = glob.glob('**/*.yml', recursive=True) + glob.glob('**/*.yaml', recursive=True)
          
          for file in yaml_files:
              try:
                  with open(file, 'r') as f:
                      yaml.safe_load(f)
                  print(f'‚úÖ {file} is valid YAML')
              except yaml.YAMLError as e:
                  print(f'‚ùå {file} has YAML syntax error: {e}')
                  sys.exit(1)
          "
      
      - name: Validate VERSION.dat
        run: |
          if [ ! -f "VERSION.dat" ]; then
            echo "‚ùå VERSION.dat not found"
            exit 1
          fi
          
          # Check for required fields
          if ! grep -q "MAJOR=" VERSION.dat; then
            echo "‚ùå VERSION.dat missing MAJOR field"
            exit 1
          fi
          
          if ! grep -q "MINOR=" VERSION.dat; then
            echo "‚ùå VERSION.dat missing MINOR field"
            exit 1
          fi
          
          if ! grep -q "PATCH=" VERSION.dat; then
            echo "‚ùå VERSION.dat missing PATCH field"
            exit 1
          fi
          
          echo "‚úÖ VERSION.dat is valid"
      
      - name: Test conanfile.py basic functionality
        run: |
          echo "üîç Testing conanfile functionality..."
          python -c "
          import sys
          sys.path.append('.')
          
          # Test main conanfile.py
          from conanfile import OpenSSLConan
          conan = OpenSSLConan()
          conan.recipe_folder = '.'
          
          try:
              conan.set_version()
              print(f'‚úÖ Version detection works: {conan.version}')
          except Exception as e:
              print(f'‚ùå Version detection failed: {e}')
              sys.exit(1)
          
          try:
              conan.configure()
              print('‚úÖ Basic configure works')
          except Exception as e:
              print(f'‚ùå Configure failed: {e}')
              sys.exit(1)
          "
          
          # Test conanfile-minimal.py if it exists
          if [ -f "conanfile-minimal.py" ]; then
            echo "üîç Testing conanfile-minimal.py functionality..."
            python -c "
            import sys
            import importlib.util
            
            # Load conanfile-minimal.py
            spec = importlib.util.spec_from_file_location('conanfile_minimal', 'conanfile-minimal.py')
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            conan = module.OpenSSLConan()
            conan.recipe_folder = '.'
            
            try:
                conan.set_version()
                print(f'‚úÖ Minimal conanfile version detection works: {conan.version}')
            except Exception as e:
                print(f'‚ùå Minimal conanfile version detection failed: {e}')
                sys.exit(1)
            
            try:
                conan.configure()
                print('‚úÖ Minimal conanfile configure works')
            except Exception as e:
                print(f'‚ùå Minimal conanfile configure failed: {e}')
                sys.exit(1)
            "
          fi

  conan-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install conan>=2.0
          pip install pyyaml
      
      - name: Validate conanfile.py
        run: |
          echo "Validating conanfile.py..."
          conan inspect . --format=json
          echo "‚úÖ Conanfile validation passed"
      
      - name: Validate Conan profiles
        run: |
          echo "üîç Validating Conan profiles..."
          
          # Check conan/ directory profiles  
          if [ -d "conan" ]; then
            for profile in conan/*.profile; do
              if [ -f "$profile" ]; then
                echo "Validating $profile"
                # Basic syntax check - profiles should be parseable as INI-style
                python -c "
                import configparser
                try:
                    config = configparser.ConfigParser()
                    config.read('$profile')
                    print('‚úÖ $profile is valid')
                except Exception as e:
                    print('‚ùå $profile has syntax error:', e)
                    exit(1)
                "
              fi
            done
          fi
          
          echo "‚úÖ Conan profiles validation completed"

  workflow-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Validate GitHub Actions workflows
        run: |
          # Check for required workflows
          if [ ! -f ".github/workflows/trigger-tools.yml" ]; then
            echo "‚ùå Missing trigger-tools.yml workflow"
            exit 1
          fi
          
          if [ ! -f ".github/workflows/basic-validation.yml" ]; then
            echo "‚ùå Missing basic-validation.yml workflow"  
            exit 1
          fi
          
          echo "‚úÖ Required workflows are present"
      
      - name: Check workflow syntax
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            
            const workflowFiles = [
              '.github/workflows/trigger-tools.yml',
              '.github/workflows/basic-validation.yml'
            ];
            
            for (const file of workflowFiles) {
              if (fs.existsSync(file)) {
                try {
                  const content = fs.readFileSync(file, 'utf8');
                  yaml.load(content);
                  console.log(`‚úÖ ${file} has valid YAML syntax`);
                } catch (error) {
                  console.log(`‚ùå ${file} has invalid YAML syntax: ${error.message}`);
                  process.exit(1);
                }
              }
            }

  repository-structure:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Validate minimal repository structure
        run: |
          echo "üîç Validating minimal repository structure..."
          
          # Required files for minimal repository
          required_files=(
            "conanfile.py"
            "VERSION.dat"
            "Configure" 
            "config"
            ".github/workflows/trigger-tools.yml"
            ".github/workflows/basic-validation.yml"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          # Check for conan directory (replaces conan-profiles)
          if [ ! -d "conan" ]; then
            echo "‚ùå Missing conan/ directory"
            exit 1
          else
            echo "‚úÖ Found: conan/ directory"
          fi
          
          # Optional files that support the minimal repository
          optional_files=(
            "conanfile-minimal.py"
            "conan/default.profile"
            "conan/ci-minimal.yml"
          )
          
          for file in "${optional_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found optional: $file"
            fi
          done
          
          # Warn about orchestration files that should be in openssl-tools
          # Note: During migration, these files may still exist
          orchestration_files=(
            "scripts/conan/conan_orchestrator.py"
            "scripts/ci/conan_automation.py" 
            "conan-dev/"
            "openssl-tools-structure/"
          )
          
          echo ""
          echo "üîç Checking for orchestration files (should be moved to openssl-tools):"
          for path in "${orchestration_files[@]}"; do
            if [ -e "$path" ]; then
              echo "‚ö†Ô∏è  Migration pending - found: $path"
              echo "   This should be moved to openssl-tools repository"
            fi
          done
          
          echo "‚úÖ Repository structure validation complete"