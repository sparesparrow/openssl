# Copyright 2022-2025 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the Apache License 2.0 (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html

name: Windows Compression GitHub CI

on:
  pull_request:
    paths:
      - 'crypto/comp/*.c'
      - '.github/workflows/windows_comp.yml'
  push:
    paths:
      - '**.c'

permissions:
  contents: read

jobs:
  zstd:
    runs-on: windows-latest
    env:
      CONAN_USER_HOME: ${{ github.workspace }}/.conan2
      CONAN_COLOR_DISPLAY: 1
      CLICOLOR_FORCE: 1
      CLICOLOR: 1
    steps:
    - uses: actions/checkout@v4
    - name: checkout fuzz/corpora submodule
      run: git submodule update --init --depth 1 fuzz/corpora
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Set up Conan Python Environment
      run: |
        python scripts/setup-ci-environment.py
    
    - name: Create Conan build profile
      run: |
        conan profile detect --force
    
    - name: Conan install
      run: |
        conan install . --profile=conan-dev/profiles/windows-msvc2022.profile -o enable_zstd=True -o fips=True
    
    - name: Conan build
      run: |
        conan build . --profile=conan-dev/profiles/windows-msvc2022.profile -o enable_zstd=True -o fips=True
    
    - name: Conan test
      timeout-minutes: 60
      run: |
        conan test . --profile=conan-dev/profiles/windows-msvc2022.profile -o enable_zstd=True -o fips=True

  brotli:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: checkout fuzz/corpora submodule
      run: git submodule update --init --depth 1 fuzz/corpora
    - name: install nasm
      run: |
        # Download NASM directly (bypasses Chocolatey issues)
        $url = "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip"
        $output = "nasm.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        
        # Extract to C:\nasm
        Expand-Archive -Path $output -DestinationPath "C:\nasm" -Force
        
        # Find the actual nasm.exe location (it's usually in a subdirectory)
        $nasmDir = Get-ChildItem -Path "C:\nasm" -Recurse -Name "nasm.exe" | Select-Object -First 1
        $nasmPath = Split-Path -Parent "C:\nasm\$nasmDir"
        
        # Add to PATH
        echo $nasmPath >> $env:GITHUB_PATH
        
        # Verify installation
        & "$nasmPath\nasm.exe" --version
    - name: prepare the build directory
      run: mkdir _build
    - name: Get brotli
      run: |
        vcpkg install brotli:x64-windows
        "C:\vcpkg\packages\brotli_x64-windows\bin" | Out-File -FilePath "$env:GITHUB_PATH" -Append
    - name: config
      working-directory: _build
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        perl ..\Configure --strict-warnings enable-comp enable-brotli --with-brotli-include=C:\vcpkg\packages\brotli_x64-windows\include --with-brotli-lib=C:\vcpkg\packages\brotli_x64-windows\lib no-makedepend -DOSSL_WINCTX=openssl VC-WIN64A
        perl configdata.pm --dump
    - name: build
      working-directory: _build
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        nmake
    - name: Gather openssl version info
      working-directory: _build
      run: |
        apps/openssl.exe version -v
        apps/openssl.exe version -v | %{($_ -split '\s+')[1]}
        apps/openssl.exe version -v | %{($_ -split '\s+')[1] -replace '([0-9]+\.[0-9]+)(\..*)','$1'}
        echo "OSSL_VERSION=$(apps/openssl.exe version -v | %{($_ -split '\s+')[1] -replace '([0-9]+\.[0-9]+)(\..*)','$1'})" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: Set registry keys
      working-directory: _build
      run: |
        echo ${Env:OSSL_VERSION}
        reg.exe add HKLM\SOFTWARE\OpenSSL-${Env:OSSL_VERSION}-openssl /v OPENSSLDIR /t REG_EXPAND_SZ /d TESTOPENSSLDIR /reg:32
        reg.exe add HKLM\SOFTWARE\OpenSSL-${Env:OSSL_VERSION}-openssl /v ENGINESDIR /t REG_EXPAND_SZ /d TESTOPENSSLDIR /reg:32
        reg.exe add HKLM\SOFTWARE\OpenSSL-${Env:OSSL_VERSION}-openssl /v MODULESDIR /t REG_EXPAND_SZ /d TESTOPENSSLDIR /reg:32
        reg.exe query HKLM\SOFTWARE\OpenSSL-${Env:OSSL_VERSION}-openssl /v OPENSSLDIR /reg:32
    - name: download coreinfo
      run: |
        mkdir _build\coreinfo
        Invoke-WebRequest -Uri "https://download.sysinternals.com/files/Coreinfo.zip" -outfile "_build\coreinfo\Coreinfo.zip"
    - name: get cpu info
      working-directory: _build
      continue-on-error: true
      run: |
        7z.exe x coreinfo/Coreinfo.zip
        ./Coreinfo64.exe -accepteula -f
        ./apps/openssl.exe version -c
