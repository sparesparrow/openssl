name: Basic OpenSSL Integration Test

# This workflow tests the CORE functionality: building OpenSSL with Conan
# NO complex features until this basic workflow succeeds consistently

on:
  # Triggered by openssl repository builds
  repository_dispatch:
    types: [openssl-build-triggered]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      openssl_ref:
        description: 'OpenSSL git ref to build (branch/tag/commit)'
        required: false
        default: 'master'
      build_type:
        description: 'Build type (Debug/Release)'
        required: false
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1

jobs:
  # ONE simple job: Build OpenSSL with Conan
  build-openssl-basic:
    name: Build OpenSSL with Conan
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Reasonable timeout for OpenSSL build
    
    steps:
      - name: Checkout openssl-tools
        uses: actions/checkout@v4
        with:
          path: openssl-tools
      
      - name: Checkout OpenSSL source
        uses: actions/checkout@v4
        with:
          repository: sparesparrow/openssl
          ref: ${{ github.event.inputs.openssl_ref || github.event.client_payload.ref || 'master' }}
          path: openssl-source
          fetch-depth: 1
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Conan 2.x
        run: |
          pip install 'conan>=2.0,<3.0'
          conan --version
          echo "✅ Conan installed successfully"
      
      - name: Configure Conan profile
        run: |
          conan profile detect --force
          echo "📋 Detected Conan profile:"
          conan profile show default
      
      - name: Verify OpenSSL source structure
        working-directory: openssl-source
        run: |
          echo "🔍 Checking OpenSSL source structure..."
          
          # Critical files that MUST exist for OpenSSL build
          required_files=(
            "config"
            "Configure" 
            "VERSION.dat"
            "crypto"
            "ssl"
            "include"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ ERROR: Required OpenSSL component missing: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Validate VERSION.dat format
          if ! grep -q "MAJOR=" VERSION.dat; then
            echo "❌ ERROR: VERSION.dat missing MAJOR field"
            exit 1
          fi
          
          if ! grep -q "MINOR=" VERSION.dat; then
            echo "❌ ERROR: VERSION.dat missing MINOR field"
            exit 1
          fi
          
          if ! grep -q "PATCH=" VERSION.dat; then
            echo "❌ ERROR: VERSION.dat missing PATCH field"
            exit 1
          fi
          
          echo "✅ OpenSSL source structure is valid"
      
      - name: Copy conanfile.py to OpenSSL source
        run: |
          cp openssl-tools/conanfile.py openssl-source/
          echo "✅ Copied conanfile.py to OpenSSL source directory"
          
          # Verify the copy was successful
          if [ ! -f "openssl-source/conanfile.py" ]; then
            echo "❌ ERROR: Failed to copy conanfile.py"
            exit 1
          fi
      
      - name: Install system dependencies for OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential perl
          echo "✅ System dependencies installed"
      
      - name: Test conanfile.py syntax and basic functionality
        working-directory: openssl-source
        run: |
          echo "🔍 Testing conanfile.py basic functionality..."
          
          # Test Python syntax
          python -m py_compile conanfile.py
          echo "✅ conanfile.py syntax is valid"
          
          # Test basic imports and class instantiation
          python -c "
          import sys
          sys.path.append('.')
          from conanfile import OpenSSLConan
          
          conan = OpenSSLConan()
          conan.recipe_folder = '.'
          
          # Test version detection
          try:
              conan.set_version()
              print(f'✅ Version detection works: {conan.version}')
          except Exception as e:
              print(f'❌ Version detection failed: {e}')
              sys.exit(1)
          
          # Test basic configuration
          try:
              conan.configure()
              print('✅ Basic configure works')
          except Exception as e:
              print(f'❌ Configure failed: {e}')
              sys.exit(1)
          "
      
      - name: Build OpenSSL with Conan (Simple Configuration)
        working-directory: openssl-source
        run: |
          echo "🔨 Building OpenSSL with Conan..."
          echo "Using simple, proven configuration for baseline test"
          
          # Use simple options that are most likely to succeed
          conan create . \
            --build=missing \
            -s build_type=${{ github.event.inputs.build_type || 'Release' }} \
            -s compiler.cppstd=17 \
            -o shared=True \
            -o fips=False \
            -o enable_quic=False \
            -o enable_unit_test=False \
            -o no_deprecated=False \
            -o no_asm=False \
            -o no_threads=False \
            -tf ""
          
          echo "✅ OpenSSL build completed successfully!"
      
      - name: Verify Conan package was created
        run: |
          echo "🔍 Verifying OpenSSL package in Conan cache..."
          conan list "openssl/*"
          
          # Get detailed info about the created package
          echo ""
          echo "📦 Package details:"
          conan list "openssl/*" --format=verbose
          
          echo "✅ Package verification complete"
      
      - name: Test basic package functionality
        run: |
          echo "🧪 Testing basic package functionality..."
          
          # Create a simple test consumer
          mkdir -p test-consumer
          cd test-consumer
          
          cat > conanfile.txt << 'EOF'
          [requires]
          openssl/[*]
          
          [generators]
          CMakeDeps
          CMakeToolchain
          EOF
          
          cat > test.cpp << 'EOF'
          #include <openssl/opensslv.h>
          #include <iostream>
          
          int main() {
              std::cout << "OpenSSL version: " << OPENSSL_VERSION_TEXT << std::endl;
              return 0;
          }
          EOF
          
          # Install dependencies
          conan install . --build=missing
          
          echo "✅ Basic package consumption test passed"
      
      - name: Report status back to OpenSSL repo
        if: github.event_name == 'repository_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare status report
          STATUS="${{ job.status }}"
          REF="${{ github.event.client_payload.ref || 'unknown' }}"
          SHA="${{ github.event.client_payload.sha || 'unknown' }}"
          PR_NUMBER="${{ github.event.client_payload.pr_number || '' }}"
          
          echo "📊 Build Status Report:"
          echo "  Status: $STATUS"
          echo "  OpenSSL Ref: $REF" 
          echo "  OpenSSL SHA: $SHA"
          echo "  PR Number: $PR_NUMBER"
          
          # Create status comment for PR if PR number provided
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            COMMENT="## 🔨 OpenSSL-Tools Build Result
            
            **Status:** ✅ SUCCESS
            **OpenSSL Ref:** \`$REF\`
            **Build Configuration:** 
            - Build Type: ${{ github.event.inputs.build_type || 'Release' }}
            - Shared Libraries: Yes
            - FIPS: Disabled
            - QUIC: Disabled
            
            **Key Achievements:**
            - ✅ OpenSSL source validation passed
            - ✅ conanfile.py compatibility verified  
            - ✅ Conan build completed successfully
            - ✅ Package created and tested
            
            **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            "
            
            echo "Posting success comment to OpenSSL PR #$PR_NUMBER"
            gh api --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/sparesparrow/openssl/issues/$PR_NUMBER/comments" \
              -f body="$COMMENT" || echo "Failed to post comment (non-critical)"
          fi
      
      - name: Success Summary
        if: success()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ✅ OpenSSL Integration Test - SUCCESS
          
          ### Key Achievements
          - ✅ OpenSSL source structure validated
          - ✅ conanfile.py syntax and functionality verified
          - ✅ Conan profile configured successfully
          - ✅ OpenSSL built with Conan successfully
          - ✅ Package created in Conan cache
          - ✅ Basic package consumption tested
          
          ### Build Configuration
          - **Build Type:** ${{ github.event.inputs.build_type || 'Release' }}
          - **Shared Libraries:** Yes
          - **FIPS Mode:** Disabled (baseline test)
          - **QUIC Support:** Disabled (baseline test)
          - **Compression:** Disabled (baseline test)
          
          ### Next Steps - Phase 2
          Now that baseline works, you can safely add:
          1. Multi-platform testing (Windows, macOS)
          2. Build variations (Debug, Static, FIPS)
          3. Advanced features (QUIC, compression)
          4. Performance optimization and caching
          
          ### ⚠️ Important
          **Do NOT add complex features until this baseline test passes consistently (3-5 runs).**
          EOF
      
      - name: Failure Summary  
        if: failure()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ❌ OpenSSL Integration Test - FAILED
          
          ### What This Means
          The basic OpenSSL + Conan integration is not working. This must be fixed before proceeding with any advanced features.
          
          ### Required Actions
          1. 🔍 **Check the build logs above for specific error messages**
          2. 🔧 **Fix conanfile.py compatibility issues with OpenSSL source**
          3. 🧪 **Test locally:** `git clone sparesparrow/openssl && cp conanfile.py openssl/ && cd openssl && conan create .`
          4. 🔄 **Re-run this workflow until it passes**
          
          ### ❌ DO NOT Proceed Until Fixed
          - Do NOT add more workflows
          - Do NOT add complex features  
          - Do NOT add build matrices
          - Do NOT merge other PRs
          
          ### Focus Areas to Check
          - conanfile.py version detection from VERSION.dat
          - OpenSSL configure command generation
          - System dependencies (perl, build tools)
          - Conan profile compatibility
          EOF
      
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_id }}
          path: |
            openssl-source/config.log
            openssl-source/configdata.pm
            ~/.conan2/logs/
          retention-days: 7
