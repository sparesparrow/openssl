# Core CI - Consolidated Workflow
# Replaces 32 workflows with 1 smart workflow using matrices and conditionals
# Target: ~20-30 checks instead of 202

name: Core CI

on:
  push:
    branches: [main, master, 'release/*']
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  OSSL_RUN_CI_TESTS: 1

jobs:
  # Smart change detection to skip unnecessary builds
  changes:
    runs-on: ubuntu-latest
    outputs:
      source: ${{ steps.filter.outputs.source }}
      docs: ${{ steps.filter.outputs.docs }}
      tests: ${{ steps.filter.outputs.tests }}
      fuzz: ${{ steps.filter.outputs.fuzz }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            source:
              - 'crypto/**'
              - 'ssl/**'
              - 'apps/**'
              - 'providers/**'
              - 'include/**'
              - 'Configure'
              - 'VERSION.dat'
            docs:
              - 'doc/**'
              - '**.md'
            tests:
              - 'test/**'
            fuzz:
              - 'fuzz/**'
            workflows:
              - '.github/workflows/**'

  # Quick docs-only check (2 min instead of 45 min for doc PRs)
  docs-check:
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: config
        run: ./config --banner=Configured enable-fips && perl configdata.pm --dump
      - name: make build_generated
        run: make -s build_generated
      - name: make doc-nits
        run: make doc-nits
      - name: make md-nits
        run: |
          sudo gem install mdl
          make md-nits

  # CONSOLIDATED BUILD MATRIX - 2-3 compilers instead of 10+
  core-builds:
    needs: changes
    if: success() && (needs.changes.outputs.source == 'true' || needs.changes.outputs.tests == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - Only 2 representative GCC versions
          - name: "gcc-11"
            os: ubuntu-latest
            cc: gcc-11
            config: "--strict-warnings enable-fips enable-quic enable-lms"
            
          - name: "gcc-14"
            os: ubuntu-latest  
            cc: gcc-14
            config: "--strict-warnings enable-fips enable-quic"
            
          # Clang - Single version
          - name: "clang-15"
            os: ubuntu-latest
            cc: clang-15
            config: "--strict-warnings no-fips enable-quic"
            
          # Sanitizers - Consolidated into single job
          - name: "sanitizers"
            os: ubuntu-latest
            cc: clang-15
            config: "--strict-warnings --debug enable-asan enable-ubsan enable-fips"
            setup: |
              sudo sysctl -w vm.mmap_rnd_bits=28
              
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Set up Conan Python Environment
        run: |
          python scripts/setup-ci-environment.py
      
      - name: Create Conan build profile
        run: |
          conan profile detect --force
      
      - name: Setup
        if: matrix.setup
        run: ${{ matrix.setup }}
      
      - name: Conan install
        run: |
          conan install . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan build
        run: |
          conan build . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan test
        run: |
          conan test . --profile=conan-dev/profiles/linux-gcc11.profile

  # ESSENTIAL CROSS-PLATFORM - Only 5 platforms instead of 20+
  cross-platform:
    needs: changes
    if: success() && needs.changes.outputs.source == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # ARM64 - Single representative
          - name: "linux-arm64"
            os: linux-arm64
            config: "--strict-warnings enable-fips"
            
          # macOS - Only latest versions  
          - name: "macos-arm64"
            os: macos-14
            config: "--strict-warnings enable-fips"
            
          # Windows - Single representative (skip if too slow)
          # - name: "windows-x64"
          #   os: windows-latest
          #   config: "VC-WIN64A"
            
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Set up Conan Python Environment
        run: |
          python scripts/setup-ci-environment.py
      
      - name: Create Conan build profile
        run: |
          conan profile detect --force
      
      - name: Conan install
        run: |
          conan install . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan build
        run: |
          conan build . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan test
        run: |
          conan test . --profile=conan-dev/profiles/linux-gcc11.profile

  # Fuzzing - Only run when fuzz code changes
  fuzz:
    needs: changes
    if: success() && needs.changes.outputs.fuzz == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install Conan
        run: |
          pip install "conan==2.0.0"
          conan --version
          
      - name: Set up Conan Python Environment
        run: |
          python scripts/setup-ci-environment.py
      
      - name: Create Conan build profile
        run: |
          conan profile detect --force
      
      - name: setup fuzz/corpora via Conan
        run: python scripts/setup-fuzz-corpora-conan.py --profile linux-gcc11
      
      - name: Adjust ASLR
        run: sudo sysctl -w vm.mmap_rnd_bits=28
      
      - name: Conan install
        run: |
          conan install . --profile=conan-dev/profiles/linux-gcc11.profile -o enable_asan=True -o enable_ubsan=True -o fips=True
      
      - name: Conan build
        run: |
          conan build . --profile=conan-dev/profiles/linux-gcc11.profile -o enable_asan=True -o enable_ubsan=True -o fips=True
      
      - name: Conan test
        run: |
          conan test . --profile=conan-dev/profiles/linux-gcc11.profile -o enable_asan=True -o enable_ubsan=True -o fips=True

  # Single comprehensive check job instead of many
  special-configs:
    needs: changes
    if: success() && needs.changes.outputs.source == 'true'
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "minimal"
            opts: "enable-demos no-bulk no-pic no-asm -DOPENSSL_SMALL_FOOTPRINT"
          - name: "no-deprecated"
            opts: "enable-demos no-deprecated enable-fips"
          - name: "no-shared"
            opts: "enable-demos no-shared enable-fips"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Set up Conan Python Environment
        run: |
          python scripts/setup-ci-environment.py
      
      - name: Create Conan build profile
        run: |
          conan profile detect --force
      
      - name: Conan install
        run: |
          conan install . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan build
        run: |
          conan build . --profile=conan-dev/profiles/linux-gcc11.profile
      
      - name: Conan test
        run: |
          conan test . --profile=conan-dev/profiles/linux-gcc11.profile

  # Final status check
  ci-status:
    needs: [changes, docs-check, core-builds, cross-platform, fuzz, special-configs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        run: |
          echo "## Core CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Changes: source=${{ needs.changes.outputs.source }}, docs=${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docs: ${{ needs.docs-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Core builds: ${{ needs.core-builds.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-platform: ${{ needs.cross-platform.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fuzz: ${{ needs.fuzz.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Special configs: ${{ needs.special-configs.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any required job failed
          if [[ "${{ needs.core-builds.result }}" == "failure" ]]; then
            echo "❌ Core builds failed"
            exit 1
          fi
          
          echo "✅ Core CI passed"
