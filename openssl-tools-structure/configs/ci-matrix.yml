# OpenSSL Build Matrix Configuration
# Defines build configurations for different scenarios

# Platform configurations
platforms:
  linux:
    ubuntu-20.04:
      runners: ["ubuntu-20.04"]
      compilers: ["gcc-9", "gcc-11", "clang-12", "clang-14"]
      architectures: ["x86_64", "arm64"]
    ubuntu-22.04:
      runners: ["ubuntu-22.04"]
      compilers: ["gcc-11", "gcc-12", "clang-14", "clang-15"]
      architectures: ["x86_64", "arm64"]
    
  windows:
    windows-2019:
      runners: ["windows-2019"]
      compilers: ["msvc-19.28", "msvc-19.29"]
      architectures: ["x86_64"]
    windows-2022:
      runners: ["windows-2022"]
      compilers: ["msvc-19.30", "msvc-19.31"]
      architectures: ["x86_64"]
  
  macos:
    macos-11:
      runners: ["macos-11"]
      compilers: ["clang-13", "clang-14"]
      architectures: ["x86_64"]
    macos-12:
      runners: ["macos-12"]
      compilers: ["clang-14", "clang-15"]
      architectures: ["x86_64", "arm64"]

# Build profiles
profiles:
  # Standard profiles
  default:
    description: "Default release build"
    options:
      shared: true
      fips: false
      enable_quic: true
    build_type: "Release"
    
  debug:
    description: "Debug build with symbols"
    options:
      shared: true
      fips: false
      enable_quic: true
      enable_crypto_mdebug: true
    build_type: "Debug"
    
  static:
    description: "Static libraries build"
    options:
      shared: false
      fips: false
      enable_quic: true
    build_type: "Release"
    
  # Security profiles
  fips:
    description: "FIPS 140-2 compliant build"
    options:
      shared: true
      fips: true
      enable_quic: true
      enable_unit_test: true
    build_type: "Release"
    validation_required: true
    
  # Performance profiles
  optimized:
    description: "Highly optimized build"
    options:
      shared: true
      fips: false
      enable_quic: true
      no_asm: false
    build_type: "Release"
    compiler_flags: ["-O3", "-march=native"]
    
  # Testing profiles
  sanitizers:
    description: "Build with sanitizers"
    options:
      shared: true
      fips: false
      enable_quic: true
      enable_asan: true
    build_type: "Debug"
    platforms: ["linux"]  # Sanitizers work best on Linux
    
  coverage:
    description: "Build with coverage analysis"
    options:
      shared: true
      fips: false
      enable_quic: true
    build_type: "Debug"
    coverage: true
    platforms: ["linux"]

# Build scopes - determine which profiles to use based on changes
build_scopes:
  minimal:
    description: "Minimal validation for small changes"
    profiles: ["default"]
    platforms: ["linux.ubuntu-22.04"]
    compilers: ["gcc-11"]
    architectures: ["x86_64"]
    
  standard:
    description: "Standard validation for regular changes"
    profiles: ["default", "debug", "static"]
    platforms: ["linux.ubuntu-22.04", "windows.windows-2022"]
    compilers: ["gcc-11", "msvc-19.31"]
    architectures: ["x86_64"]
    
  full:
    description: "Full validation for core changes"
    profiles: ["default", "debug", "static", "fips", "optimized"]
    platforms: ["linux.ubuntu-20.04", "linux.ubuntu-22.04", "windows.windows-2022", "macos.macos-12"]
    compilers: ["gcc-11", "clang-14", "msvc-19.31"]
    architectures: ["x86_64", "arm64"]
    
  security:
    description: "Security-focused validation"
    profiles: ["fips", "sanitizers", "coverage"]
    platforms: ["linux.ubuntu-22.04"]
    compilers: ["gcc-11", "clang-14"]
    architectures: ["x86_64"]
    
  performance:
    description: "Performance validation and benchmarking"
    profiles: ["optimized", "default"]
    platforms: ["linux.ubuntu-22.04", "windows.windows-2022", "macos.macos-12"]
    compilers: ["gcc-11", "clang-14", "msvc-19.31"]
    architectures: ["x86_64"]
    benchmarks: true

# Change detection rules
change_detection:
  core_files:
    patterns:
      - "crypto/**/*.c"
      - "crypto/**/*.h"
      - "ssl/**/*.c"
      - "ssl/**/*.h"
      - "include/**/*.h"
    scope: "full"
    
  config_files:
    patterns:
      - "Configure"
      - "config"
      - "conanfile.py"
      - "VERSION.dat"
    scope: "full"
    
  provider_files:
    patterns:
      - "providers/**/*.c"
      - "providers/**/*.h"
      - "engines/**/*.c"
      - "engines/**/*.h"
    scope: "standard"
    
  test_files:
    patterns:
      - "test/**/*.c"
      - "test/**/*.pl"
      - "test/**/*.t"
    scope: "standard"
    
  app_files:
    patterns:
      - "apps/**/*.c"
      - "apps/**/*.h"
    scope: "standard"
    
  docs_files:
    patterns:
      - "doc/**/*.pod"
      - "doc/**/*.md"
      - "*.md"
    scope: "minimal"
    
  fuzz_files:
    patterns:
      - "fuzz/**/*.c"
      - "fuzz/**/*.h"
    scope: "security"

# Resource limits
resource_limits:
  default:
    timeout_minutes: 120
    memory_gb: 8
    disk_gb: 50
    
  fips:
    timeout_minutes: 180  # FIPS builds take longer
    memory_gb: 12
    disk_gb: 75
    
  sanitizers:
    timeout_minutes: 240  # Sanitizer builds are slow
    memory_gb: 16
    disk_gb: 100
    
  coverage:
    timeout_minutes: 300  # Coverage analysis is slow
    memory_gb: 16
    disk_gb: 100

# Caching configuration
caching:
  conan_cache:
    enabled: true
    max_size_gb: 10
    retention_days: 30
    
  compiler_cache:
    enabled: true
    max_size_gb: 5
    retention_days: 7
    
  test_cache:
    enabled: true
    max_size_gb: 2
    retention_days: 14

# Notification settings
notifications:
  success:
    channels: ["github-status"]
    
  failure:
    channels: ["github-status", "slack"]
    escalation_after_minutes: 30
    
  performance_regression:
    channels: ["github-status", "slack", "email"]
    threshold_percent: 10  # Alert if build time increases by 10%

# Quality gates
quality_gates:
  test_success_rate:
    minimum_percent: 99.5
    
  build_time:
    maximum_minutes: 60
    warning_minutes: 45
    
  cache_hit_rate:
    minimum_percent: 70
    target_percent: 85
    
  memory_usage:
    maximum_gb: 12
    warning_gb: 8