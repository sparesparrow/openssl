name: OpenSSL CI Dispatcher

on:
  repository_dispatch:
    types: [openssl-build-triggered]

env:
  CONAN_USER_HOME: ${{ github.workspace }}/.conan2
  CONAN_COLOR_DISPLAY: 1
  CLICOLOR_FORCE: 1
  CLICOLOR: 1

jobs:
  parse-context:
    runs-on: ubuntu-latest
    outputs:
      source_repo: ${{ steps.parse.outputs.source_repo }}
      source_sha: ${{ steps.parse.outputs.source_sha }}
      source_ref: ${{ steps.parse.outputs.source_ref }}
      build_scope: ${{ steps.parse.outputs.build_scope }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      pr_title: ${{ steps.parse.outputs.pr_title }}
      core_changes: ${{ steps.parse.outputs.core_changes }}
      config_changes: ${{ steps.parse.outputs.config_changes }}
      test_changes: ${{ steps.parse.outputs.test_changes }}
      provider_changes: ${{ steps.parse.outputs.provider_changes }}
    
    steps:
      - name: Parse Context
        id: parse
        run: |
          echo "🔍 Parsing OpenSSL build context..."
          
          # Parse the client payload
          CONTEXT='${{ toJson(github.event.client_payload) }}'
          echo "Context: $CONTEXT"
          
          # Extract key information
          echo "source_repo=$(echo "$CONTEXT" | jq -r '.source_repo')" >> $GITHUB_OUTPUT
          echo "source_sha=$(echo "$CONTEXT" | jq -r '.source_sha')" >> $GITHUB_OUTPUT
          echo "source_ref=$(echo "$CONTEXT" | jq -r '.source_ref')" >> $GITHUB_OUTPUT
          echo "build_scope=$(echo "$CONTEXT" | jq -r '.build_scope')" >> $GITHUB_OUTPUT
          echo "pr_number=$(echo "$CONTEXT" | jq -r '.pr_number')" >> $GITHUB_OUTPUT
          echo "pr_title=$(echo "$CONTEXT" | jq -r '.pr_title')" >> $GITHUB_OUTPUT
          echo "core_changes=$(echo "$CONTEXT" | jq -r '.core_changes')" >> $GITHUB_OUTPUT
          echo "config_changes=$(echo "$CONTEXT" | jq -r '.config_changes')" >> $GITHUB_OUTPUT
          echo "test_changes=$(echo "$CONTEXT" | jq -r '.test_changes')" >> $GITHUB_OUTPUT
          echo "provider_changes=$(echo "$CONTEXT" | jq -r '.provider_changes')" >> $GITHUB_OUTPUT
          
          echo "✅ Context parsed successfully"
          echo "Source Repo: ${{ steps.parse.outputs.source_repo }}"
          echo "Source SHA: ${{ steps.parse.outputs.source_sha }}"
          echo "Build Scope: ${{ steps.parse.outputs.build_scope }}"

  generate-build-matrix:
    runs-on: ubuntu-latest
    needs: parse-context
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    
    steps:
      - name: Checkout openssl-tools
        uses: actions/checkout@v4
      
      - name: Generate Build Matrix
        id: matrix
        run: |
          echo "🔧 Generating build matrix..."
          
          # Run the build matrix generator
          python scripts/build_matrix_generator.py \
            --source-repo "${{ needs.parse-context.outputs.source_repo }}" \
            --source-sha "${{ needs.parse-context.outputs.source_sha }}" \
            --build-scope "${{ needs.parse-context.outputs.build_scope }}" \
            --core-changes "${{ needs.parse-context.outputs.core_changes }}" \
            --config-changes "${{ needs.parse-context.outputs.config_changes }}" \
            --test-changes "${{ needs.parse-context.outputs.test_changes }}" \
            --provider-changes "${{ needs.parse-context.outputs.provider_changes }}" \
            --output-format json > matrix.json
          
          # Output matrix for GitHub Actions
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          cat matrix.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Build matrix generated"

  build-packages:
    runs-on: ${{ matrix.platform }}
    needs: [parse-context, generate-build-matrix]
    strategy:
      matrix: ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout OpenSSL Source
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.parse-context.outputs.source_repo }}
          ref: ${{ needs.parse-context.outputs.source_sha }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Conan
        run: |
          pip install conan
          conan --version
      
      - name: Configure Conan
        run: |
          conan config init
          conan config set general.revisions_enabled=1
          conan config set general.cmake_find_package_multi=1
      
      - name: Set up Artifactory
        run: |
          conan remote add artifactory ${{ secrets.ARTIFACTORY_URL }}
          conan user -p ${{ secrets.ARTIFACTORY_PASSWORD }} -r artifactory ${{ secrets.ARTIFACTORY_USERNAME }}
      
      - name: Build OpenSSL Package
        run: |
          echo "🔨 Building OpenSSL package..."
          echo "Platform: ${{ matrix.platform }}"
          echo "Profile: ${{ matrix.profile }}"
          echo "Options: ${{ matrix.options }}"
          
          # Build the package
          conan create . --profile=${{ matrix.profile }} ${{ matrix.options }} --build=missing
          
          echo "✅ Package built successfully"
      
      - name: Upload to Artifactory
        run: |
          echo "📦 Uploading package to Artifactory..."
          
          # Upload package
          conan upload "openssl/*" -r=artifactory --all --confirm --retry=3 --retry-wait=10
          
          echo "✅ Package uploaded successfully"
      
      - name: Generate Build Report
        run: |
          echo "📊 Generating build report..."
          
          # Generate build metrics
          python scripts/artifactory_manager.py generate-report \
            --package-name openssl \
            --version ${{ matrix.version }} \
            --platform ${{ matrix.platform }} \
            --profile ${{ matrix.profile }} \
            --build-time ${{ matrix.build_time }} \
            --cache-hits ${{ matrix.cache_hits }} \
            --output build-report.json
          
          echo "✅ Build report generated"
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ matrix.platform }}-${{ matrix.profile }}
          path: |
            build-report.json
            ~/.conan2/p/*/p/
          retention-days: 30

  report-status:
    runs-on: ubuntu-latest
    needs: [parse-context, build-packages]
    if: always()
    
    steps:
      - name: Report Status to Source Repository
        uses: actions/github-script@v7
        with:
          script: |
            const sourceRepo = '${{ needs.parse-context.outputs.source_repo }}';
            const sourceSha = '${{ needs.parse-context.outputs.source_sha }}';
            const prNumber = '${{ needs.parse-context.outputs.pr_number }}';
            const buildScope = '${{ needs.parse-context.outputs.build_scope }}';
            
            // Create status check
            const { data: checkRun } = await github.rest.checks.create({
              owner: sourceRepo.split('/')[0],
              repo: sourceRepo.split('/')[1],
              name: 'OpenSSL Tools CI',
              head_sha: sourceSha,
              status: 'completed',
              conclusion: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              output: {
                title: 'OpenSSL Tools CI Complete',
                summary: `Build scope: ${buildScope}\nStatus: ${{ job.status }}`,
                text: `**Build Scope:** ${buildScope}\n**Status:** ${{ job.status }}\n**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              }
            });
            
            // Comment on PR if applicable
            if (prNumber && prNumber !== 'null') {
              const comment = `## 🔄 OpenSSL Tools CI Complete\n\n**Build Scope:** ${buildScope}\n**Status:** ${{ job.status }}\n**Workflow Run:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              await github.rest.issues.createComment({
                owner: sourceRepo.split('/')[0],
                repo: sourceRepo.split('/')[1],
                issue_number: parseInt(prNumber),
                body: comment
              });
            }
      
      - name: Update Artifactory Metrics
        run: |
          echo "📈 Updating Artifactory metrics..."
          
          # Update build metrics
          python scripts/artifactory_manager.py update-metrics \
            --workflow-run-id ${{ github.run_id }} \
            --build-scope ${{ needs.parse-context.outputs.build_scope }} \
            --status ${{ job.status }} \
            --timestamp $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          echo "✅ Metrics updated successfully"